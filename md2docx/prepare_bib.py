from json import dump
from re import split, findall

import latexcodec

TYPES = {'article': "article-journal",
         'book': 'book',
         'incollection': 'chapter',
         'inproceedings': 'paper-conference',
         'phdthesis': 'thesis',
         }

FIELDS = {'author': 'author',
          'title': 'title',
          'volume': 'volume',
          'number': 'issue',
          'pages': 'page',
          'year': 'issued',
          'journal': 'container-title',
          }

LATEX_SYMBOLS = {'$\\alpha$': 'α',
                 '$\\beta$': 'β',
                 '$\\gamma$': 'γ',
                 '$\\delta$': 'δ',
                 '$\\Sigma$': 'Σ',
                 '$\\epsilon$': 'ϵ',
                 '$\\eta$': 'η',
                 '$\\mu$': 'μ',
                 '$\\sim$': '~',
                 '$\\theta$': 'θ',
                 '$\\zeta$': 'ζ',
                 }


def fix_biblio(biblio_orig):
    """fix bibliography by keeping only useful fields.

    Parameters
    ----------
    orig_bib_file : path to .bib file
        directory with optional information

    Returns
    -------
    path to file
        bib file with a simpler structure.
    """
    biblio = biblio_orig.with_suffix('.json')

    if not biblio.exists() or biblio_orig.stat().st_mtime > biblio.stat().st_mtime:
        prepare_bib(biblio_orig, biblio)

    return biblio


def prepare_bib(old_bib, new_bib):
    with old_bib.open() as f:
        bib_orig = f.read()

    for latex_name, symbol in LATEX_SYMBOLS.items():
        bib_orig = bib_orig.replace(latex_name, symbol)

    keys = findall('@([a-z]+){([\w]*),', bib_orig)
    entries = split('@[a-z]+{[\w]*,', bib_orig)[1:]  # the first one is the autogenerated script by Mendeley

    assert len(keys) == len(entries)

    j_entries = {}
    for key, entry in zip(keys, entries):
        j_entries[key[1]] = fix_entry(key, entry)

    with new_bib.open('w') as f:
        dump(j_entries, f, separators=(',', ':'))


def fix_entry(key, entry):
    j_entry = {'id': key[1],
               'type': TYPES[key[0]]}

    for field, value in findall('\n([a-z]*) = {(.*)}', entry):
        if field == 'author':
            author_keys = []
            for one_author in value.split(' and '):
                if '{' in one_author:
                    one_author = one_author.replace('ð', 'd')  # simplify when it has both latex and utf8 in the same name
                    one_author = one_author.encode('latex').decode("latex")
                    one_author = one_author.replace('{', '').replace('}', '')

                author_name = one_author.split(', ')
                author_key = {'family': author_name[0].strip()}
                if len(author_name) > 1:
                    author_key['given'] = author_name[1].strip()
                author_keys.append(author_key)

            value = author_keys

        if field == 'pages':
            value = value.replace('--', '-')

        if field == 'year':
            value = {'raw': value}

        if field == 'title':
            value = value.strip('{}')

        if field in FIELDS:
            j_entry[FIELDS[field]] = value

    return j_entry


def return_csl(var_dir, journal):
    """Return the default citation style language depending on journal type.

    Parameters
    ----------
    var_dir : path to dir
        directory with optional information
    journal : str
        str with journal name

    Returns
    -------
    path to file
        path to csl file
    """
    csl_dir = var_dir / 'csl'

    if journal == 'CerebCortex':
        CSL = csl_dir / 'cerebral-cortex.csl'
    elif journal == 'eLife':
        CSL = csl_dir / 'the-journal-of-neuroscience.csl'
    elif journal == 'HumBrainMapp':
        CSL = csl_dir / 'human-brain-mapping.csl'
    elif journal == 'JNeurosci':
        CSL = csl_dir / 'the-journal-of-neuroscience.csl'
    elif journal == 'NatCommun':
        CSL = csl_dir / 'nature.csl'
    elif journal == 'NeuralPlast':
        CSL = csl_dir / 'elsevier-vancouver.csl'  # I removed access field
    elif journal == 'Neuroimage':
        CSL = csl_dir / 'elsevier-harvard.csl'
    elif journal == 'Neuron':
        CSL = csl_dir / 'cell.csl'
    elif journal == 'PLoSBiol':
        CSL = csl_dir / 'plos.csl'  # I removed access field
    elif journal == 'PNAS':
        CSL = csl_dir / 'pnas.csl'  # I removed access field
    elif journal == 'Sleep':
        CSL = csl_dir / 'sleep.csl'
    else:
        raise ValueError('The format of ' + journal + ' is not implemented')

    return CSL
